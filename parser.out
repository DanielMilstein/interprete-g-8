Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RPT
    V

Grammar

Rule 0     S' -> resultado
Rule 1     resultado -> s
Rule 2     resultado -> ASIGN ID EQ EQ2 s
Rule 3     s -> N
Rule 4     s -> ID
Rule 5     s -> s SU s
Rule 6     s -> s RE s
Rule 7     s -> PR ID
Rule 8     s -> PR s

Terminals, with rules where they appear

ASIGN                : 2
EQ                   : 2
EQ2                  : 2
ID                   : 2 4 7
N                    : 3
PR                   : 7 8
RE                   : 6
RPT                  : 
SU                   : 5
V                    : 
error                : 

Nonterminals, with rules where they appear

resultado            : 0
s                    : 1 2 5 5 6 6 8

Parsing method: LALR

state 0

    (0) S' -> . resultado
    (1) resultado -> . s
    (2) resultado -> . ASIGN ID EQ EQ2 s
    (3) s -> . N
    (4) s -> . ID
    (5) s -> . s SU s
    (6) s -> . s RE s
    (7) s -> . PR ID
    (8) s -> . PR s

    ASIGN           shift and go to state 3
    N               shift and go to state 5
    ID              shift and go to state 4
    PR              shift and go to state 6

    resultado                      shift and go to state 1
    s                              shift and go to state 2

state 1

    (0) S' -> resultado .



state 2

    (1) resultado -> s .
    (5) s -> s . SU s
    (6) s -> s . RE s

    $end            reduce using rule 1 (resultado -> s .)
    SU              shift and go to state 7
    RE              shift and go to state 8


state 3

    (2) resultado -> ASIGN . ID EQ EQ2 s

    ID              shift and go to state 9


state 4

    (4) s -> ID .

    SU              reduce using rule 4 (s -> ID .)
    RE              reduce using rule 4 (s -> ID .)
    $end            reduce using rule 4 (s -> ID .)


state 5

    (3) s -> N .

    SU              reduce using rule 3 (s -> N .)
    RE              reduce using rule 3 (s -> N .)
    $end            reduce using rule 3 (s -> N .)


state 6

    (7) s -> PR . ID
    (8) s -> PR . s
    (3) s -> . N
    (4) s -> . ID
    (5) s -> . s SU s
    (6) s -> . s RE s
    (7) s -> . PR ID
    (8) s -> . PR s

    ID              shift and go to state 10
    N               shift and go to state 5
    PR              shift and go to state 6

    s                              shift and go to state 11

state 7

    (5) s -> s SU . s
    (3) s -> . N
    (4) s -> . ID
    (5) s -> . s SU s
    (6) s -> . s RE s
    (7) s -> . PR ID
    (8) s -> . PR s

    N               shift and go to state 5
    ID              shift and go to state 4
    PR              shift and go to state 6

    s                              shift and go to state 12

state 8

    (6) s -> s RE . s
    (3) s -> . N
    (4) s -> . ID
    (5) s -> . s SU s
    (6) s -> . s RE s
    (7) s -> . PR ID
    (8) s -> . PR s

    N               shift and go to state 5
    ID              shift and go to state 4
    PR              shift and go to state 6

    s                              shift and go to state 13

state 9

    (2) resultado -> ASIGN ID . EQ EQ2 s

    EQ              shift and go to state 14


state 10

    (7) s -> PR ID .
    (4) s -> ID .

  ! reduce/reduce conflict for SU resolved using rule 4 (s -> ID .)
  ! reduce/reduce conflict for RE resolved using rule 4 (s -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 4 (s -> ID .)
    SU              reduce using rule 4 (s -> ID .)
    RE              reduce using rule 4 (s -> ID .)
    $end            reduce using rule 4 (s -> ID .)

  ! SU              [ reduce using rule 7 (s -> PR ID .) ]
  ! RE              [ reduce using rule 7 (s -> PR ID .) ]
  ! $end            [ reduce using rule 7 (s -> PR ID .) ]


state 11

    (8) s -> PR s .
    (5) s -> s . SU s
    (6) s -> s . RE s

  ! shift/reduce conflict for SU resolved as shift
  ! shift/reduce conflict for RE resolved as shift
    $end            reduce using rule 8 (s -> PR s .)
    SU              shift and go to state 7
    RE              shift and go to state 8

  ! SU              [ reduce using rule 8 (s -> PR s .) ]
  ! RE              [ reduce using rule 8 (s -> PR s .) ]


state 12

    (5) s -> s SU s .
    (5) s -> s . SU s
    (6) s -> s . RE s

    SU              reduce using rule 5 (s -> s SU s .)
    RE              reduce using rule 5 (s -> s SU s .)
    $end            reduce using rule 5 (s -> s SU s .)

  ! SU              [ shift and go to state 7 ]
  ! RE              [ shift and go to state 8 ]


state 13

    (6) s -> s RE s .
    (5) s -> s . SU s
    (6) s -> s . RE s

    SU              reduce using rule 6 (s -> s RE s .)
    RE              reduce using rule 6 (s -> s RE s .)
    $end            reduce using rule 6 (s -> s RE s .)

  ! SU              [ shift and go to state 7 ]
  ! RE              [ shift and go to state 8 ]


state 14

    (2) resultado -> ASIGN ID EQ . EQ2 s

    EQ2             shift and go to state 15


state 15

    (2) resultado -> ASIGN ID EQ EQ2 . s
    (3) s -> . N
    (4) s -> . ID
    (5) s -> . s SU s
    (6) s -> . s RE s
    (7) s -> . PR ID
    (8) s -> . PR s

    N               shift and go to state 5
    ID              shift and go to state 4
    PR              shift and go to state 6

    s                              shift and go to state 16

state 16

    (2) resultado -> ASIGN ID EQ EQ2 s .
    (5) s -> s . SU s
    (6) s -> s . RE s

    $end            reduce using rule 2 (resultado -> ASIGN ID EQ EQ2 s .)
    SU              shift and go to state 7
    RE              shift and go to state 8

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SU in state 11 resolved as shift
WARNING: shift/reduce conflict for RE in state 11 resolved as shift
WARNING: reduce/reduce conflict in state 10 resolved using rule (s -> ID)
WARNING: rejected rule (s -> PR ID) in state 10
WARNING: Rule (s -> PR ID) is never reduced
